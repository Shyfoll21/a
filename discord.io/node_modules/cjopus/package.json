{
  "name": "cjopus",
  "version": "0.0.2",
  "description": "Emscripten bindings for libopus. Encode / Decode your audio to opus with pure JS.",
  "main": "./lib/Opus.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/izy521/CJOpus.git"
  },
  "keywords": [
    "Opus",
    "libopus",
    "Emscripten",
    "Audio",
    "LLVM"
  ],
  "author": {
    "name": "izy521"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/izy521/CJOpus/issues"
  },
  "homepage": "https://github.com/izy521/CJOpus#readme",
  "readme": "# CJOpus\r\nEmscripten (C++/JavaScript) bindings for libopus\r\n\r\nA module to encode PCM data to and decode PCM data from Opus.\r\n\r\n## Using\r\n\r\n### OpusEncoder\r\n\r\n```js\r\n//Tries to mimic `node-opus` in syntax.\r\nvar encoder = new OpusEncoder( 48000, 2 );\r\n```\r\n\r\n### OpusEncoder#encode(Buffer/TypedArray/Array)\r\n\r\n```js\r\nvar PCM = getPCMDataSomehow();\r\nvar encoded = encoder.encode( PCM );\r\n```\r\n\r\n### OpusEncoder#decode(Buffer/TypedArray/Array)\r\n\r\n```js\r\nvar OPUS = getOPUSDataSomehow();\r\nvar decoded = encoder.decode( OPUS );\r\n```\r\n\r\n### OpusEncoder#encodeUnsafe / OpusEncoder#decodeUnsafe\r\n\r\nThese two methods work just like the safe versions, however they don't do any error checking and they use `.subarray()` instead of `.slice()`. Because of this, it's a bit faster. It's relatively safe to use, just know that if an encoding error happens, it will return an empty `Uint8Array` (encode) or `Int16Array` (decode).\r\n\r\n## Building\r\n\r\nCurrently in the process of getting build scripts together (also not very knowledgable about that), but the steps for generating this is as follows:\r\n\r\n* 1. Download `libopus` (1.1.3 was used here as of Aug 6th 2016).\r\n* 2. Configure it with Emscripten's `emconfigure` (`emconfigure ./configure`)\r\n  * 2a. If it fails and complains about intrinsics, remove `intrinsics` related logic from the `configure` file.\r\n* 3. Make with Emscripten's `emmake` (`emmake ./make`)\r\n* 4. Link and compile with `emcc`.\r\n  * 4a. The command I used: `emcc --memory-init-file 0 -O3 -g0 --llvm-opts 3 --closure 1 --llvm-lto 3  CJOpus.c opus-1.1.3/.libs/libopus.so -o CJOpus.js`\r\n\r\nApologies if this is a bit unorthodox.\r\n",
  "readmeFilename": "README.md",
  "_id": "cjopus@0.0.2",
  "dist": {
    "shasum": "def8048f211e6f74cd748e004230683868ec2240"
  },
  "_from": "cjopus@0.0.2",
  "_resolved": "https://registry.npmjs.org/cjopus/-/cjopus-0.0.2.tgz"
}
